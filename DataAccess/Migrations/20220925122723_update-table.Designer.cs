// <auto-generated />
using System;
using DataAccess.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    [Migration("20220925122723_update-table")]
    partial class updatetable
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Concrete.AppOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("AppOperationClaims", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "AppUser"
                        },
                        new
                        {
                            Id = 2,
                            Name = "AppUserTypeAppOperationClaim"
                        },
                        new
                        {
                            Id = 3,
                            Name = "AppUserType"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserTypeId")
                        .HasMaxLength(11)
                        .HasColumnType("int")
                        .HasColumnName("AppUserTypeId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("GsmNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("GsmNumber");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ProfileImageUrl");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AppUserTypeId");

                    b.ToTable("AppUsers", "dbo");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AppUserTypeId = -1,
                            CreatedDate = new DateTime(2022, 9, 25, 15, 27, 22, 821, DateTimeKind.Local).AddTicks(5735),
                            CreatedUserId = 1,
                            Email = "kubi@hot.com",
                            FirstName = "Kubilay",
                            GsmNumber = "",
                            IsDeleted = false,
                            LastName = "Yazı",
                            PasswordHash = new byte[] { 142, 80, 15, 162, 209, 5, 94, 157, 159, 17, 223, 227, 144, 146, 187, 177, 149, 186, 150, 247, 181, 48, 69, 79, 160, 69, 166, 42, 237, 78, 179, 2, 82, 214, 35, 15, 120, 200, 214, 15, 243, 55, 20, 97, 155, 154, 106, 55, 240, 40, 90, 119, 62, 69, 228, 34, 48, 10, 255, 163, 6, 48, 123, 37 },
                            PasswordSalt = new byte[] { 214, 188, 141, 238, 207, 168, 40, 146, 228, 190, 206, 235, 16, 210, 243, 96, 58, 147, 254, 186, 26, 151, 93, 25, 85, 130, 191, 121, 83, 225, 0, 33, 147, 200, 111, 213, 129, 20, 237, 172, 15, 87, 45, 76, 248, 82, 30, 186, 162, 59, 137, 180, 46, 2, 133, 18, 50, 15, 25, 2, 183, 108, 150, 87, 48, 118, 0, 113, 68, 43, 24, 156, 233, 237, 136, 95, 37, 41, 98, 215, 154, 46, 217, 139, 181, 36, 172, 244, 178, 252, 229, 186, 38, 232, 189, 216, 99, 181, 211, 195, 128, 243, 199, 31, 112, 8, 189, 209, 210, 187, 84, 222, 137, 215, 57, 100, 128, 140, 152, 105, 17, 151, 141, 153, 238, 141, 161, 204 },
                            ProfileImageUrl = "",
                            RefreshToken = new Guid("dfdc6b15-b360-46c7-ae73-251f36b01f7b"),
                            UserName = "kubilayyazi"
                        },
                        new
                        {
                            Id = -2,
                            AppUserTypeId = -2,
                            CreatedDate = new DateTime(2022, 9, 25, 15, 27, 22, 822, DateTimeKind.Local).AddTicks(6014),
                            CreatedUserId = 1,
                            Email = "admin@gmail.com",
                            FirstName = "Admin",
                            GsmNumber = "",
                            IsDeleted = false,
                            LastName = "ADMIN",
                            PasswordHash = new byte[] { 142, 80, 15, 162, 209, 5, 94, 157, 159, 17, 223, 227, 144, 146, 187, 177, 149, 186, 150, 247, 181, 48, 69, 79, 160, 69, 166, 42, 237, 78, 179, 2, 82, 214, 35, 15, 120, 200, 214, 15, 243, 55, 20, 97, 155, 154, 106, 55, 240, 40, 90, 119, 62, 69, 228, 34, 48, 10, 255, 163, 6, 48, 123, 37 },
                            PasswordSalt = new byte[] { 214, 188, 141, 238, 207, 168, 40, 146, 228, 190, 206, 235, 16, 210, 243, 96, 58, 147, 254, 186, 26, 151, 93, 25, 85, 130, 191, 121, 83, 225, 0, 33, 147, 200, 111, 213, 129, 20, 237, 172, 15, 87, 45, 76, 248, 82, 30, 186, 162, 59, 137, 180, 46, 2, 133, 18, 50, 15, 25, 2, 183, 108, 150, 87, 48, 118, 0, 113, 68, 43, 24, 156, 233, 237, 136, 95, 37, 41, 98, 215, 154, 46, 217, 139, 181, 36, 172, 244, 178, 252, 229, 186, 38, 232, 189, 216, 99, 181, 211, 195, 128, 243, 199, 31, 112, 8, 189, 209, 210, 187, 84, 222, 137, 215, 57, 100, 128, 140, 152, 105, 17, 151, 141, 153, 238, 141, 161, 204 },
                            ProfileImageUrl = "",
                            RefreshToken = new Guid("a83cd83c-4e0b-4095-9f03-4240ec52000d"),
                            UserName = "admin"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AppUserTypeName");

                    b.HasKey("Id");

                    b.ToTable("AppUserTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AppUserTypeName = "System Admin"
                        },
                        new
                        {
                            Id = -2,
                            AppUserTypeName = "Admin"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUserTypeAppOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppOperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("AppOperationClaimId");

                    b.Property<int>("AppUserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AppUserTypeId");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("char(4)")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppOperationClaimId");

                    b.HasIndex("AppUserTypeId");

                    b.ToTable("AppUserTypeAppOperationClaims", "dbo");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AppOperationClaimId = 1,
                            AppUserTypeId = -2,
                            Status = "1011"
                        },
                        new
                        {
                            Id = -2,
                            AppOperationClaimId = 2,
                            AppUserTypeId = -2,
                            Status = "1111"
                        },
                        new
                        {
                            Id = -3,
                            AppOperationClaimId = 3,
                            AppUserTypeId = -2,
                            Status = "1111"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUser", b =>
                {
                    b.HasOne("Core.Entities.Concrete.AppUserType", "AppUserType")
                        .WithMany()
                        .HasForeignKey("AppUserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserType");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUserTypeAppOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.Concrete.AppOperationClaim", "AppOperationClaim")
                        .WithMany("AppUserTypeAppOperationClaims")
                        .HasForeignKey("AppOperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.AppUserType", "AppUserType")
                        .WithMany()
                        .HasForeignKey("AppUserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppOperationClaim");

                    b.Navigation("AppUserType");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppOperationClaim", b =>
                {
                    b.Navigation("AppUserTypeAppOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
