// <auto-generated />
using System;
using DataAccess.Concrete.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace DataAccess.Migrations
{
    [DbContext(typeof(ECommerceDbContext))]
    partial class ECommerceDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.14")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Core.Entities.Concrete.AppOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("AppOperationClaims", "dbo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            IsActive = true,
                            Name = "AppUser"
                        },
                        new
                        {
                            Id = 3,
                            IsActive = true,
                            Name = "AppUserType"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUser", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppUserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AppUserTypeId");

                    b.Property<DateTime>("CreatedDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("CreatedDate")
                        .HasDefaultValueSql("getdate()");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("Email");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("FirstName");

                    b.Property<string>("GsmNumber")
                        .HasMaxLength(11)
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("GsmNumber");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("LastName");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordHash");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("varbinary(max)")
                        .HasColumnName("PasswordSalt");

                    b.Property<string>("ProfileImageUrl")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("ProfileImageUrl");

                    b.Property<Guid>("RefreshToken")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("UserName");

                    b.HasKey("Id");

                    b.HasIndex("AppUserTypeId");

                    b.ToTable("AppUsers", "dbo");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AppUserTypeId = -1,
                            CreatedDate = new DateTime(2022, 12, 21, 23, 9, 3, 771, DateTimeKind.Local).AddTicks(3316),
                            CreatedUserId = 1,
                            Email = "sadmin@gmail.com",
                            FirstName = "System",
                            GsmNumber = "",
                            IsActive = true,
                            IsDeleted = false,
                            LastName = "Admin",
                            PasswordHash = new byte[] { 84, 40, 123, 103, 190, 75, 68, 179, 144, 49, 19, 217, 208, 181, 88, 101, 184, 250, 254, 65, 99, 204, 232, 151, 43, 253, 211, 243, 101, 115, 194, 20, 232, 184, 75, 27, 4, 125, 191, 104, 18, 187, 9, 247, 79, 184, 4, 164, 132, 158, 22, 188, 158, 151, 220, 171, 178, 230, 238, 101, 253, 110, 223, 244 },
                            PasswordSalt = new byte[] { 131, 120, 46, 174, 184, 138, 167, 88, 26, 47, 1, 45, 21, 251, 90, 80, 234, 22, 150, 16, 7, 111, 216, 220, 123, 85, 220, 15, 230, 184, 50, 40, 159, 39, 20, 134, 63, 15, 210, 165, 57, 236, 37, 87, 134, 236, 125, 155, 236, 119, 242, 81, 247, 159, 143, 166, 126, 198, 33, 29, 169, 83, 213, 133, 65, 192, 125, 210, 58, 240, 63, 141, 143, 213, 19, 122, 245, 238, 176, 196, 112, 120, 180, 108, 149, 45, 179, 190, 5, 252, 78, 47, 38, 182, 76, 224, 237, 103, 32, 2, 33, 184, 9, 108, 120, 84, 114, 165, 123, 198, 15, 70, 112, 137, 174, 131, 235, 245, 91, 3, 40, 215, 206, 103, 72, 20, 25, 237 },
                            ProfileImageUrl = "",
                            RefreshToken = new Guid("1777657d-f4d2-48a0-ac06-568fc5a602d3"),
                            UserName = "sadmin"
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUserType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AppUserTypeName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("AppUserTypeName");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("AppUserTypes", "dbo");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            AppUserTypeName = "System Admin",
                            CreatedDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CreatedUserId = 0,
                            IsActive = true,
                            IsDeleted = false
                        });
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUserTypeAppOperationClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("AppOperationClaimId")
                        .HasColumnType("int")
                        .HasColumnName("AppOperationClaimId");

                    b.Property<int>("AppUserTypeId")
                        .HasColumnType("int")
                        .HasColumnName("AppUserTypeId");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DeletedUserId")
                        .HasColumnType("int");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(4)
                        .HasColumnType("char(4)")
                        .HasColumnName("Status");

                    b.Property<DateTime?>("UpdatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("UpdatedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AppOperationClaimId");

                    b.HasIndex("AppUserTypeId");

                    b.ToTable("AppUserTypeAppOperationClaims", "dbo");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUser", b =>
                {
                    b.HasOne("Core.Entities.Concrete.AppUserType", "AppUserType")
                        .WithMany("AppUsers")
                        .HasForeignKey("AppUserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppUserType");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUserTypeAppOperationClaim", b =>
                {
                    b.HasOne("Core.Entities.Concrete.AppOperationClaim", "AppOperationClaim")
                        .WithMany("AppUserTypeAppOperationClaims")
                        .HasForeignKey("AppOperationClaimId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Entities.Concrete.AppUserType", "AppUserType")
                        .WithMany("AppUserTypeAppOperationClaims")
                        .HasForeignKey("AppUserTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AppOperationClaim");

                    b.Navigation("AppUserType");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppOperationClaim", b =>
                {
                    b.Navigation("AppUserTypeAppOperationClaims");
                });

            modelBuilder.Entity("Core.Entities.Concrete.AppUserType", b =>
                {
                    b.Navigation("AppUsers");

                    b.Navigation("AppUserTypeAppOperationClaims");
                });
#pragma warning restore 612, 618
        }
    }
}
